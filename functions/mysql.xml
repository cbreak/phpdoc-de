 <reference id="ref.mysql">
  <title>MySQL Funktionen</title>
  <titleabbrev>MySQL</titleabbrev>
  <partintro>
   <simpara>
    Diese Funktionen erlauben den Zugriff auf einen MySQL Datenbank-Server.
   </simpara>
   <simpara>
    Weiter Informationen zu MySQL gibt es unter <ulink
    url="http://www.mysql.com/">http://www.mysql.com/</ulink>.
   </simpara>
  </partintro>

  <refentry id="function.mysql-affected-rows">
   <refnamediv>
    <refname>mysql_affected_rows</refname> 
    <refpurpose>Liefert die Anzahl betroffener Reihen einer vorhergehenden MySQL Operation</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_affected_rows</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_affected_rows</function> liefert die Anzahl
     betroffener Reihen durch die letzte INSERT, UPDATE oder DELETE
     Anfrage an den Server, der mit dem angegebenen Verbindungskennung
     assoziiert wird. Wenn die
     Verbindungskennung nicht angegeben wird, wird die zur Zeit offene
     Verbindung verwendet.
    </para>
    <para>
     Wenn die letzte Anfrage ein DELETE ohne WHERE-Anweisung war,
     wurden alle Datensätze aus der Tabelle gelöscht, die Funktion
     wird aber trotzdem Null zurückliefern.
    </para>
    <para>
     Diese Funktion macht keinen Sinn bei SELECT-Anfragen, sondern
     nur wenn Datensätze modifiziert wurden. Um die Anzahl der gelieferten
     Datensätze einer SELECT-Anfrage zu erhalten, benutzen Sie die Funktion
     <function>mysql_num_rows</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-change-user">
   <refnamediv>
    <refname>mysql_change_user</refname> 
    <refpurpose>
     Ändern den zur Zeit angemeldeten Benutzers
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_change_user</function></funcdef>
     <paramdef>string <parameter>Benutzername</parameter></paramdef>
     <paramdef>string <parameter>Kennwort</parameter></paramdef>
     <paramdef>string 
      <parameter>
       <optional>Datenbank</optional>
      </parameter>
     </paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_change_user</function> ändert den angemeldeten
     Benutzer der Datenbank-Verbindung in den Benutzer mit dem übergebenen
     Namen und Kennung. Fehlt die Verbindungs-Kennung wird die Änderung
     für die  aktive Verbindung vorgenommen.
     If a database is
     specified, this will default or current database after the user
     has been changed.
     Wenn die Anmeldung als neuer Benutzer mit dem angegebenen Kennwort
     fehlschlägt, bleibt der aktuelle Benutzer aktiv.</para>
     <note><para>This Funktion wurde mit PHP 3.0.13 eingeführt und
     erfordert MySQL 3.23.3 oder höher.
    </para></note>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-close">
   <refnamediv>
    <refname>mysql_close</refname>
    <refpurpose>Schließt MySQL-Verbindung</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_close</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>                   
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Liefert zurück: true im Erfolgsfall, false im Fehlerfall.
    </para>
    <para> 
     <function>mysql_close</function> schließt die Verbindung zur
     MySQL-Datenbank, die zur Verbindungs-Kennung gehört.
     Wenn die Verbindungs-Kennung nicht angegeben wird, wird die aktuelle
     Verbindung geschlossen.
    </para>
    <note><para> 
     Dies ist für gewöhnlich nicht notwendig, weil nichtpersistente offene
     Verbindungen automatisch mit Beendigung des Scripts geschlossen werden.
    </para></note>
    <para> 
     <function>mysql_close</function> schließt keine persistenten Verbindungen,
     die mit <function>mysql_pconnect</function> geöffnet wurden.
    </para>
    <example>
     <title>MySQL close Beispiel</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "secret") {
        or die ("Could not connect");
    }
    print ("Connected successfully");
    mysql_close ($link);
?>
     </programlisting>
    </example>
    <para> 
     Siehe auch: <function>mysql_connect</function> und
     <function>mysql_pconnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-connect">
   <refnamediv>
    <refname>mysql_connect</refname>
    <refpurpose>Öffnet eine Verbindung zum MySQL Server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_connect</function></funcdef>
     <paramdef>string 
      <parameter>
       <optional>hostname
	<optional>:port</optional>
	<optional>:/path/to/socket</optional>
       </optional>
      </parameter>
     </paramdef>
     <paramdef>string 
      <parameter>
       <optional>Benutzername</optional>
      </parameter>
     </paramdef>
     <paramdef>string 
      <parameter>
       <optional>Kennwort</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Liefert zurück: Eine Verbindungs-Kennung im Erfolgsfall oder false
     im Fehlerfall.
    </para>
    <para> 
     <function>mysql_connect</function> öffnet eine Verbindung zu einem
     MySQL server.  Alle Argumente sind optional, und wenn alle fehlen
     wird ('localhost', Benutzername des Benutzers dem der Server-Prozess
     gehört, leeres Kennwort) angenommen.
    </para>  
    <para>
     Der Parameter <parameter>hostname</parameter> kann zudem die Portnummer
     enthalten, z.B. 
     &quot;hostname:port&quot; oder den Pfad zu einem Socket
     z.B. &quot;:/path/to/socket&quot; für Zugriffe auf dem lokalen Rechner.
     <note>
      <para>
       Unterstützung für &quot;:port&quot; wurde in PHP 3.0B4 hinzugefügt.
      </para>
      <para>
       Unterstützung für &quot;:/path/to/socket&quot; wurde in
       PHP 3.0.10 hinzugefügt.
      </para>
     </note>
    </para>
    <para> 
     Für den Fall, dass ein Aufruf von
     <function>mysql_connect</function> mit den gleichen Argumenten erfolgt,
     wird keine neue Verbindung aufgebaut, sondern die Verbindungs-Kennung
     der schon bestehenden Verbindung zurückgeliefert.
    </para>
    <para>
     Die Verbindung zum Datenbank-Server wird geschlossen, sobald das
     PHP-Skript beendet wird oder 
     <function>mysql_close</function> aufgerufen wird.
    </para>  
    <example>
     <title>MySQL connect Beispiel</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "secret") {
        or die ("Could not connect");
    } 
    print ("Connected successfully");
    mysql_close ($link);
?>
     </programlisting>
    </example>
    <para> Siehe auch
     <function>mysql_pconnect</function> und
     <function>mysql_close</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-create-db">
   <refnamediv>
    <refname>mysql_create_db</refname>
    <refpurpose>Erzeuge eine MySQL-Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_create_db</function></funcdef>
     <paramdef>string <parameter>Datenbankname</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_create_db</function> versucht eine neue Datenbank auf
     dem Server mit der angegebenen Verbindungs-Kennung zu erzeugen.
    </para>
    <example>
     <title>MySQL Erzeuge Datenbank Beispiel</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim") {
        or die ("Could not connect");
    } 
    if (mysql_create_db ("my_db")) {
        print ("Database created successfully\n");
    } else {
        printf ("Error creating database: %s\n", mysql_error ());
    }
?>
     </programlisting>
    </example>
    <para> 
     Siehe auch: <function>mysql_drop_db</function>.  Für
     Rückwärtskompatibilität kann auch
     <function>mysql_createdb</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-data-seek">
   <refnamediv>
    <refname>mysql_data_seek</refname>
    <refpurpose>Bewegt internen Datensatz-Zeiger</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_data_seek</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Datensatznummer</parameter></paramdef>
    </funcsynopsis>
    <para> 
     Liefert zurück: true im Erfolgsfall, false im Fehlerfall.
    </para>
    <para> 
     <function>mysql_data_seek</function> bewegt den internen Datensatz-Zeiger
     eines Anfrageergebnises zum Datensatz mit
     der übergebenen Nummer. Der nächste Aufruf von
     <function>mysql_fetch_row</function> liefert den entsprechenden
     Datensatz.
    </para>
    <para>
     <parameter>Datensatznummer</parameter> ist 0 oder größer.
    </para>

    <example>
     <title>MySQL data seek Beispiel</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim") {
        or die ("Could not connect");
    }

    mysql_select_db ("samp_db") {
        or die ("Could not select database");
    }

    $query = "SELECT last_name, first_name FROM friends";
    $result = mysql_query ($query) {
        or die ("Query failed");
    }

    # fetch rows in reverse order

    for ($i = mysql_num_rows ($result) - 1; $i >=0; $i--) {
        if (!mysql_data_seek ($result, $i)) {
            printf ("Cannot seek to row %d\n", $i);
            continue;
        }

        if(!($row = mysql_fetch_object ($result)))
            continue;

        printf ("%s %s&lt;BR>\n", $row->last_name, $row->first_name);
    }

    mysql_free_result ($result);
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-query">
   <refnamediv>
    <refname>mysql_db_query</refname>
    <refpurpose>Absetzen einer Anfrage an die Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_db_query</function></funcdef>
     <paramdef>string <parameter>Datenbank</parameter></paramdef>
     <paramdef>string <parameter>Anfrage</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Rückgabewert: Eine Ergebnis-Kennung als Referenz auf das Anfrageergebnis,
     (hier auch häufig nur als Ergebnis bezeichnet) oder false im Fehlerfall.
    </para>
    <para> 
     <function>mysql_db_query</function> wählt eine Datenbank und führt eine
     Anfrage darauf aus. Wenn der optionale Parameter
     <parameter>Verbindungs-Kennung</parameter> nicht angegeben ist,
     wird versucht die aktuelle Verbindung zu nutzen. Wenn auch
     dies fehlschlägt, wird weiter versucht die Verbindung aufzubauen, wie
     dies mit <function>mysql_connect</function> ohne Angabe von
     Argumenten geschehen würde.
    </para>
    <para> 
     Siehe auch <function>mysql_connect</function>. Für Rückwärtskompatibilität
     kann auch <function>mysql</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-drop-db">
   <refnamediv>
    <refname>mysql_drop_db</refname>
    <refpurpose>Entfernt eine Datenbank</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_drop_db</function></funcdef>
     <paramdef>string <parameter>Datenbankname</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Rückgabewert: true im Erfolgsfall, false ein Fehlerfall.
    </para>  
    <para> 
     <function>mysql_drop_db</function> versucht eine komplette Datenbank
     vom Server mit der übergebenen Verbindungs-Kennung zu entfernen.
    </para>
    <para> 
     Siehe auch: <function>mysql_create_db</function>. Für Rückwärtskompatibilität
     kann auch <function>mysql_dropdb</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-errno">
   <refnamediv>
    <refname>mysql_errno</refname> 
    <refpurpose>Liefert die Fehlernummer einer zuvor ausgeführten
     MySQL Operation</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_errno</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Fehler, die vom MySQL Server kommen, führen nicht zu einer
     Ausgabe von Warnungen. Stattdessen, sollte diese Funktion
     verwendet werden, um die Fehlernummer zu erhalten.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Siehe auch: <function>mysql_error</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-error">
   <refnamediv>
    <refname>mysql_error</refname>
    <refpurpose>Liefert den Fehlertext der zuvor ausgeführten
     MySQL Operation</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_error</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Fehler, die vom MySQL Server kommen, führen nicht zu einer
     Ausgabe von Warnungen. Stattdessen, sollte diese Funktion
     verwendet werden, um den Fehlertext zu erhalten.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?>
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Siehe auch: <function>mysql_errno</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname> 
    <refpurpose>
     Liefert einen Datensatz als assoziatives Array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>array <function>mysql_fetch_array</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int
      <parameter>
       <optional>Ergebnistyp</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Liefert ein Array that mit den aktuellen Datensatz enthält oder
     false, wenn keine weiteren Datensätze vorliegen.</para>
    <para>
     <function>mysql_fetch_array</function> ist einen erweiterte Version von
     <function>mysql_fetch_row</function>.  Der Datensatz wird in einem
     assoziativen Array abgelegt, in dem die Schlüssel den Namen der
     Datensatzfelder entsprechen.
    </para>
    <para>
     Wenn zwei oder mehrere Felder des Ergebnisses den gleich Feldnamen
     haben, dann wird der Wert des letzten Feldes im Array unter dem
     Feldnamen abgelegt.
     Um auch auf die anderen Felder mit dem gleichen Namen zugreifen zu
     können, müssen Sie den numerischen Index des Arrays verwenden oder
     einen Alias für das Feld erzeugen.
     <informalexample>
      <programlisting>
select t1.f1 as foo t2.f1 as bar from t1, t2
      </programlisting>
     </informalexample>
    </para>
    <para>
     Zu betonen ist, dass der Gebrauch von
     <function>mysql_fetch_array</function> NICHT signifikant
     langsamer ist als <function>mysql_fetch_row</function>,
     obwohl die Funktion einen sichtlichen Mehrwert bedeutet.
    </para>
    <para>
     Das optionale zweite Argumente <parameter>Ergebnistyp</parameter>
     in <function>mysql_fetch_array</function> ist eine Konstante und kann
     die folgenden Werte annehmen: MYSQL_ASSOC, MYSQL_NUM und
     MYSQL_BOTH. (Diese Eigenschaft wurde in PHP 3.0.7 hinzugefügt.)
    </para>
    <para>
     Für weitere Details, siehe auch
     <function>mysql_fetch_row</function>.
    </para>
    <example>
     <title>mysql fetch array</title>
     <programlisting role="php">
&lt;?php 
mysql_connect($host,$user,$password);
$result = mysql_db_query("database","select * from table");
while($row = mysql_fetch_array($result)) {
    echo $row["user_id"];
    echo $row["fullname"];
}
mysql_free_result($result);
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-field">
   <refnamediv>
    <refname>mysql_fetch_field</refname>
    <refpurpose>
     Extrahiert Feldinformationen aus einem Anfrageergebnis und liefert ein Objekt
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>object <function>mysql_fetch_field</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Feld-Offset</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Liefert ein Objekt mit Feldinformationen.
    </para>  
    <para>
     <function>mysql_fetch_field</function> kann gebraucht werden, um
     Feldinformationen über Felder in einem Anfrageergebnis zu erhalten.
     Wenn der Feld-Offset nicht angegeben wird, werden die Information des
     nächsten noch nicht mit
     <function>mysql_fetch_field</function> erfragten Feldes geliefert.
    </para>
    <para>
     Des Eigenschaften des Objekts sind:
     <itemizedlist>
      <listitem>
       <simpara>
	name - Feldname
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	table - Name der Tabelle zu der das Feld gehört
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	max_length - maximale Länge des Feldes
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	not_null - 1, wenn das Feld nicht Null sein kann 
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	primary_key - 1, wenn das Feld ein 'primary key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	unique_key - 1, wenn das Feld ein 'unique key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	multiple_key - 1, wenn das Feld ein 'non-unique key' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	numeric - 1, wenn das Feld vom Typ 'numeric' ist
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	blob - 1, wenn das Feld vom Typ 'BLOB' ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	type - der Typ des Feldes
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	unsigned - 1, wenn das Feld vorzeichenlos ist
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	zerofill - 1, wenn das Feld 'zero-filled' ist
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Siehe auch <function>mysql_field_seek</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-lengths">
   <refnamediv>
    <refname>mysql_fetch_lengths</refname> 
    <refpurpose>
     Liefert die Länge eines jeden Feldes in einem Datensatz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>array <function>mysql_fetch_lengths</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
    </funcsynopsis>
    <para> 
     Rückgabewert: Ein Array, das die Längen eines jeden Feldes in dem
     zuletzt geholten Datensatz enthält, oder false im Fehlerfall.
    </para>  
    <para>
     <function>mysql_fetch_lengths</function> liefert die Längen eines jeden
     Feldes in dem mit 
     <function>mysql_fetch_row</function>,
     <function>mysql_fetch_array</function> oder
     <function>mysql_fetch_object</function> zuletzt geholten Datensatzes,
     in einem Array.
    </para>  
    <para> 
     Siehe auch: <function>mysql_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-object">
   <refnamediv>
    <refname>mysql_fetch_object</refname>
    <refpurpose>Liefert einen Datensatz als Objekt</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>object <function>mysql_fetch_object</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int
      <parameter>
       <optional>Ergebnistyp</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Liefert ein Objekt mit Eigenschaften, die den Felder des geholten Datensatz
     entsprechen, oder false when keine weiteren Datensätze vorhanden sind.
    </para>
    <para> 
     <function>mysql_fetch_object</function> ist ähnlich zu
     <function>mysql_fetch_array</function>, mit einem Unterschied - ein
     Objekt wird zurück geliefert, anstatt eines Arrays. Indirekt bedeutet
     dies, das Sie die Felder nur mit ihren Feldnamen und nicht mir
     dem Offset ansprechen können.
     (Nummer sind ungültige Namen für Eigenschaften).
    </para>
    <para>
     Das optionale zweite Argumente <parameter>Ergebnistyp</parameter>
     in <function>mysql_fetch_array</function> ist eine Konstante und kann
     die folgenden Werte annehmen: MYSQL_ASSOC, MYSQL_NUM und
     MYSQL_BOTH.
    </para>
    <para>
     Unter Berücksichtigung der Ausführungsgeschwindigkeit ist diese
     Funktion identisch zu
     <function>mysql_fetch_array</function> und fast so schnell wie
     <function>mysql_fetch_row</function> (der Unterschied ist unwesentlich).
     <example>
      <title>mysql fetch object</title>
      <programlisting role="php">
&lt;?php 
mysql_connect($host,$user,$password);
$result = mysql_db_query("database","select * from table");
while($row = mysql_fetch_object($result)) {
    echo $row->user_id;
    echo $row->fullname;
}
mysql_free_result($result);
?>
      </programlisting>
     </example>
    </para>
    <para> 
     Siehe auch: <function>mysql_fetch_array</function> und
     <function>mysql_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-row">
   <refnamediv>
    <refname>mysql_fetch_row</refname>
    <refpurpose>Liefert einen Datensatz als indiziertes Array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>array <function>mysql_fetch_row</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
    </funcsynopsis>
    <para> 
     Rückgabewert: Ein Array mit dem geholten Datensatz oder false
     wenn keine weiteren Datensätze verfügbar sind.
    </para>
    <para>
     <function>mysql_fetch_row</function> liefert einen Datensatz aus dem
     Anfrageergebnis mit der übergebenen Kennung. Der Datensatz wird als
     Array geliefert. Jeder Feldwert ist als ein Element abgelegt.
    </para>
    <para>
     Folgende Aufrufe von <function>mysql_fetch_row</function> liefern
     die weiteren Datensätze des Anfrageergebnisses oder false, wenn keine
     weiteren Datensätze verfügbar sind.
    </para>
    <para>
     Siehe auch: <function>mysql_fetch_array</function>,
     <function>mysql_fetch_object</function>,
     <function>mysql_data_seek</function>,
     <function>mysql_fetch_lengths</function> und
     <function>mysql_result</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-name">
   <refnamediv>
    <refname>mysql_field_name</refname> 
    <refpurpose>
     Liefert den Name eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_name</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Feldindex</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_field_name</function> liefert den Namen eines Feldes in
     einem Anfrageergebnis. Argumente der Funktion ist die Kennung des
     Anfrageergebnisses und der Feldindex, z.B.
     <literal>mysql_field_name($result,2);</literal>
    </para>
    <para>
     Dies liefert den Namen des zweiten Feldes im Anfrageergebnis.
    </para>
    <para>
     Für Rückwärtskompatibilität kann <function>mysql_fieldname</function>
     verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-seek">
   <refnamediv>
    <refname>mysql_field_seek</refname>
    <refpurpose>
     Setzt den Feldzeiger auf bestimmtes Feld
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_field_seek</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Feldoffset</parameter></paramdef>
    </funcsynopsis>
    <para>
     Setzt den Feldzeiger auf den angegeben Feldoffset. Wenn mit dem nächste
     Aufruf von
     <function>mysql_fetch_field</function> keinen Feldoffset übergeben wird,
     wird das Feld auf den der Zeiger verweist zurückgeliefert.
    </para>
    <para>
     Siehe auch: <function>mysql_fetch_field</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-table">
   <refnamediv>
    <refname>mysql_field_table</refname>
    <refpurpose>
     Liefert den Namen der Tabelle, die das genannte Feld enthält
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_table</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Feldoffset</parameter></paramdef>
    </funcsynopsis>
    <para> 
     Liefert den Namen der Tabelle, die das genannte Feld enthält.
     Für Rückwärtskompatibilität can 
     <function>mysql_fieldtable</function> verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-type">
   <refnamediv>
    <refname>mysql_field_type</refname>
    <refpurpose>
     Liefert den Typ eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_type</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Feldoffset</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_field_type</function> ist ähnlich zu 
     <function>mysql_field_name</function>. Die Argumente sind
     identisch, aber der Feldtyp wird zurückgeliefert. Dieser kann einer von
     "int", "real", "string", "blob", oder anderen sein, wie in der
     Dokumentation zu MySQL angegeben.
     <example>
      <title>mysql field types</title>
      <programlisting role="php">
&lt;?php 
mysql_connect("localhost:3306");
mysql_select_db("wisconsin");
$result = mysql_query("SELECT * FROM onek");
$fields = mysql_num_fields($result);
$rows   = mysql_num_rows($result);
$i = 0;
$table = mysql_field_table($result, $i);
echo "Your '".$table."' table has ".$fields." fields and ".$rows." records &lt;BR>";
echo "The table has the following fields &lt;BR>"; 
while ($i &lt; $fields) {
    $type  = mysql_field_type  ($result, $i);
    $name  = mysql_field_name  ($result, $i);
    $len   = mysql_field_len   ($result, $i);
    $flags = mysql_field_flags ($result, $i);
    echo $type." ".$name." ".$len." ".$flags."&lt;BR>";
    $i++;
}
mysql_close();
?>
      </programlisting>
     </example>
    </para>
    <para> 
     Für Rückwärtskompatibilität kann <function>mysql_fieldtype</function>
     verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-flags">
   <refnamediv>
    <refname>mysql_field_flags</refname>
    <refpurpose>
     Liefert die Flags eines Feldes in einem Anfrageergebnis
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_flags</function></funcdef>
     <paramdef>int <parameter>Ergebnis-Kennung</parameter></paramdef>
     <paramdef>int <parameter>Feldoffset</parameter></paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_field_flags</function> liefert die Flags des Feldes
     mit dem übergeben Offset. Die Flags werden als einzelne Word pro
     Flag und Leerzeichen getrennt geliefert, so dass sie leicht mit
     <function>explode</function> getrennt werden können.
    </para>
    <para>Die folgenden Flags werden geliefert, wenn Ihre Version von MySQL
     diese unterstützt: "not_null", "primary_key",
     "unique_key", "multiple_key", "blob", "unsigned", "zerofill",
     "binary", "enum", "auto_increment", "timestamp".
    </para>
    <para> 
     Für Rückwärtskompatibilität kann <function>mysql_fieldflags</function>
     verwendet werden.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-len">
   <refnamediv>
    <refname>mysql_field_len</refname> 
    <refpurpose>
     Returns the length of the specified field
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_field_len</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>field_offset</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_field_len</function> returns the length of the
     specified field.  For downward compatibility
     <function>mysql_fieldlen</function> can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-free-result">
   <refnamediv>
    <refname>mysql_free_result</refname>
    <refpurpose>Free result memory</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_free_result</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_free_result</function> only needs to be called if
     you are worried about using too much memory while your script is
     running. All associated result memory for the specified result
     identifier will automatically be freed.
    </para>
    <para>
     For downward compatibility <function>mysql_freeresult</function>
     can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-insert-id">
   <refnamediv>
    <refname>mysql_insert_id</refname>
    <refpurpose>
     Get the id generated from the previous INSERT operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_insert_id</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_insert_id</function> returns the ID generated for
     an AUTO_INCREMENTED field.  It will return the auto-generated ID
     returned by the last INSERT query performed using the given
     <parameter>Verbindungs-Kennung</parameter>.  If
     <parameter>Verbindungs-Kennung</parameter> isn't specified, the last
     opened link is assumed.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-fields">
   <refnamediv>
    <refname>mysql_list_fields</refname>
    <refpurpose>List MySQL result fields</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_list_fields</function></funcdef>
     <paramdef>string <parameter>database_name</parameter></paramdef>
     <paramdef>string <parameter>table_name</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_list_fields</function> retrieves information
     about the given tablename. Arguments are the database name and
     the table name. A result pointer is returned which can be used
     with <function>mysql_field_flags</function>,
     <function>mysql_field_len</function>,
     <function>mysql_field_name</function> und
     <function>mysql_field_type</function>.
    </para>
    <para>
     A result identifier is a positive integer. The function returns
     -1 if a error occurs. A string describing the error will be
     placed in <literal>$phperrmsg</literal>, and unless the function
     was called as <literal>@mysql()</literal> then this error string
     will also be printed out.
    </para>
    <para>
     For downward compatibility <function>mysql_listfields</function>
     can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-dbs">
   <refnamediv>
    <refname>mysql_list_dbs</refname> 
    <refpurpose>
     List databases available on on MySQL server
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_list_dbs</function></funcdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_list_dbs</function> will return a result pointer
     containing the databases available from the current mysql
     daemon. Use the <function>mysql_tablename</function> function to
     traverse this result pointer.
    </para>
    <para>
     For downward compatibility <function>mysql_listdbs</function> can
     also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-tables">
   <refnamediv>
    <refname>mysql_list_tables</refname>
    <refpurpose>List tables in a MySQL database</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_list_tables</function></funcdef>
     <paramdef>string <parameter>database</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_list_tables</function> takes a database name and
     returns a result pointer much like the
     <function>mysql_db_query</function> function.  The
     <function>mysql_tablename</function> function should be used to
     extract the actual table names from the result pointer.
    </para>
    <para>
     For downward compatibility <function>mysql_listtables</function>
     can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-fields">
   <refnamediv>
    <refname>mysql_num_fields</refname>
    <refpurpose>Get number of fields in result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_num_fields</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_num_fields</function> returns the number of
     fields in a result set.
    </para>
    <para> 
     Siehe auch: 
     <function>mysql_db_query</function>,
     <function>mysql_query</function>,
     <function>mysql_fetch_field</function>,
     <function>mysql_num_rows</function>.</para>
    <para>
     For downward compatibility <function>mysql_numfields</function>
     can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-rows">
   <refnamediv>
    <refname>mysql_num_rows</refname>
    <refpurpose>Get number of rows in result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_num_rows</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_num_rows</function> returns the number of rows in
     a result set.
    </para>
    <para>
     Siehe auch:  
     <function>mysql_db_query</function>, 
     <function>mysql_query</function> and, 
     <function>mysql_fetch_row</function>.
    </para>
    <para>
     For downward compatibility <function>mysql_numrows</function> can
     also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-pconnect">
   <refnamediv>
    <refname>mysql_pconnect</refname> 
    <refpurpose>
     Open a persistent connection to a MySQL Server
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_pconnect</function></funcdef>
     <paramdef>string 
      <parameter>
       <optional>hostname
	<optional>:port</optional>  
	<optional>:/path/to/socket</optional>
       </optional>
      </parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>username</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>password</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Returns: A positive MySQL persistent link identifier on success,
     or false on error.
    </para>
    <para>
     <function>mysql_pconnect</function> establishes a connection to a
     MySQL server.  All of the arguments are optional, and if they're
     missing, defaults are assumed ('localhost', user name of the user
     that owns the server process, empty password).
    </para>  
    <para>
     The hostname string can also include a port
     number. eg. &quot;hostname:port&quot; or a path to a socket
     eg. &quot;:/path/to/socket&quot; for the localhost.
     <note>
      <para>
       Support for &quot;:port&quot; wass added in 3.0B4.
      </para>
      <para>
       Support for the &quot;:/path/to/socket&quot; was added in
       3.0.10.
      </para>
     </note>
    </para>     
    <para>
     <function>mysql_pconnect</function> acts very much like
     <function>mysql_connect</function> with two major differences.
    </para>
    <para> 
     First, when connecting, the function would first try to find a
     (persistent) link that's already open with the same host,
     username and password.  If one is found, an identifier for it
     will be returned instead of opening a new connection.
    </para>
    <para> 
     Second, the connection to the SQL server will not be closed when
     the execution of the script ends.  Instead, the link will remain
     open for future use (<function>mysql_close</function> will not
     close links established by <function>mysql_pconnect</function>).
    </para>
    <para> 
     This type of links is therefore called 'persistent'.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-query">
   <refnamediv>
    <refname>mysql_query</refname>
    <refpurpose>Send an SQL query to MySQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_query</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>Verbindungs-Kennung</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_query</function> sends a query to the currently
     active database on the server that's associated with the
     specified link identifier.  If
     <parameter>Verbindungs-Kennung</parameter> isn't specified, the last
     opened link is assumed.  If no link is open, the function tries
     to establish a link as if <function>mysql_connect</function> was
     called with no arguments, and use it.
    </para>
    <para>
     The query string should not end with a semicolon.
    </para>
    <para>
     <function>mysql_query</function> returns TRUE (non-zero) or FALSE
     to indicate whether or not the query succeeded.  A return value
     of TRUE means that the query was legal and could be executed by
     the server.  It does not indicate anything about the number of
     rows affected or returned. It is perfectly possible for a query
     to succeed but affect no rows or return no rows.
    </para>
    <para>
     The following query is syntactically invalid, so
     <function>mysql_query</function> fails and returns FALSE:
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT * WHERE 1=1")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     The following query is semantically invalid if
     <literal>my_col</literal> is not a column in the table
     <literal>my_tbl</literal>, so <function>mysql_query</function>
     fails and returns FALSE:
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$result = mysql_query ("SELECT my_col FROM my_tbl")
    or die ("Invalid query");
?>
      </programlisting>
     </example>
    </para>
    <para>
     <function>mysql_query</function> will also fail and return FALSE
     if you don't have permission to access the table(s) referenced by
     the query.
    </para>
    <para>
     Assuming the query succeeds, you can call
     <function>mysql_affected_rows</function> to find out how many
     rows were affected (for DELETE, INSERT, REPLACE, or UPDATE
     statements).  For SELECT statements,
     <function>mysql_query</function> returns a new result identifier
     that you can pass to <function>mysql_result</function>.  When you
     are done with the result set, you can free the resources
     associated with it by calling
     <function>mysql_free_result</function>.
    </para>
    <para>
     Siehe auch: <function>mysql_affected_rows</function>,
     <function>mysql_db_query</function>,
     <function>mysql_free_result</function>,
     <function>mysql_result</function>,
     <function>mysql_select_db</function> und
     <function>mysql_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-result">
   <refnamediv>
    <refname>mysql_result</refname>
    <refpurpose>Get result data</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_result</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>mixed 
      <parameter>
       <optional>field</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>mysql_result</function> returns the contents of one
     cell from a MySQL result set.  The field argument can be the
     field's offset, or the field's name, or the field's table dot
     field's name (fieldname.tablename).  If the column name has been
     aliased ('select foo as bar from...'), use the alias instead of
     the column name.
    </para>
    <para>
     When working on large result sets, you should consider using one
     of the functions that fetch an entire row (specified below).  As
     these functions return the contents of multiple cells in one
     function call, they're MUCH quicker than
     <function>mysql_result</function>.  Also, note that specifying a
     numeric offset for the field argument is much quicker than
     specifying a fieldname or tablename.fieldname argument.
    </para>
    <para>
     Calls <function>mysql_result</function> should not be mixed
     with calls to other functions that deal with the result set.
    </para>
    <para>
     Recommended high-performance alternatives:
     <function>mysql_fetch_row</function>, 
     <function>mysql_fetch_array</function> und
     <function>mysql_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-select-db">
   <refnamediv>
    <refname>mysql_select_db</refname>
    <refpurpose>Select a MySQL database</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_select_db</function></funcdef>
     <paramdef>string <parameter>database_name</parameter></paramdef>
     <paramdef>int 
      <parameter>
       <optional>Verbindungs-Kennung</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Returns: true on success, false on error.
    </para>
    <para> 
     <function>mysql_select_db</function> sets the current active
     database on the server that's associated with the specified link
     identifier.  If no link identifier is specified, the last opened
     link is assumed.  If no link is open, the function will try to
     establish a link as if <function>mysql_connect</function> was
     called, and use it.
    </para>
    <para>
     Every subsequent call to <function>mysql_query</function> will be
     made on the active database.
    </para>
    <para> Siehe auch:
     <function>mysql_connect</function>, 
     <function>mysql_pconnect</function> und
     <function>mysql_query</function>.
    </para>
    <para>
     For downward compatibility <function>mysql_selectdb</function>
     can also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-tablename">
   <refnamediv>
    <refname>mysql_tablename</refname>
    <refpurpose>Get table name of field</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Beschreibung</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_tablename</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
    <para> 
     <function>mysql_tablename</function> takes a result pointer
     returned by the <function>mysql_list_tables</function> function
     as well as an integer index and returns the name of a table. The
     <function>mysql_num_rows</function> function may be used to
     determine the number of tables in the result pointer.
     <example>
      <title><function>Mysql_tablename</function> Example</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
$result = mysql_list_tables ("wisconsin");
$i = 0;
while ($i &lt; mysql_num_rows ($result)) {
    $tb_names[$i] = mysql_tablename ($result, $i);
    echo $tb_names[$i] . "&lt;BR>";
    $i++;
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
